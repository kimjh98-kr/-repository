#include <iostream>

template <typename T>
class SimpleVector {
private:
    T* data;
    int currentSize;
    int maxSize;

public:
    SimpleVector() {
        maxSize = 10;
        currentSize = 0;
        data = new T[maxSize];
    }

    SimpleVector(int size) {
        maxSize = size;
        currentSize = 0;
        data = new T[maxSize];
    }

    ~SimpleVector() {
        delete[] data;
    }

    void push_back(const T& value) {
        if (currentSize < maxSize) {
            data[currentSize] = value;
            currentSize++;
        }
    }

    void pop_back() {
        if (currentSize > 0) {
            currentSize--;
        }
    }

    int size() {
        return currentSize;
    }

    int capacity() {
        return maxSize;
    }
};

int main() {
    SimpleVector<int> vec(5);

    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "현재 크기: " << vec.size() << ", 최대 크기: " << vec.capacity() << std::endl;

    vec.pop_back();
    std::cout << "pop_back 이후 크기: " << vec.size() << std::endl;

    return 0;
}
